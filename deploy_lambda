#!/usr/bin/env bash

#AWS IAM LAMBDA: role
if [ -s "${TMP}/${AWS_ROLES}_full.json" ]
then
  inf ""
  inf "${MAGENTA}Checking if appropriate role (${YELLOW}${AWS_EC2_LAMBDA_ROLE}${MAGENTA}) for LAMBDA service exists"
  AWS_EC2_LAMBDA_ROLE_CHECK=$(jq -r --arg ec2_lambda_role ${AWS_EC2_LAMBDA_ROLE} '.Roles[] | select(.RoleName == $ec2_lambda_role) | .RoleName' "${TMP}/${AWS_ROLES}_full.json")
  if [ ! -z ${AWS_EC2_LAMBDA_ROLE_CHECK} ]
  then
    inf "  Role ${YELLOW}${AWS_EC2_LAMBDA_ROLE}${CYAN} exists"
    export EC2_LAMBDA_ROLE_ARN=$(jq -r --arg ec2_lambda_role ${AWS_EC2_LAMBDA_ROLE} '.Roles[] | select(.RoleName == $ec2_lambda_role) | .Arn' "${TMP}/${AWS_ROLES}_full.json")
  else
    warn "  Role ${YELLOW}${AWS_EC2_LAMBDA_ROLE}${WINE} doesn't exist"
    aws_role_create ${AWS_EC2_LAMBDA_ROLE} lambda
  fi
fi
#AWS IAM LAMBDA: roles

#AWS IAM LAMBDA: policy
if [ -s "${TMP}/${AWS_POLICIES}_${AWS_NAMES_PREFIX}_full.json" ]
then
  inf ""
  inf "${MAGENTA}Checking if appropriate policy (${DARK_GREEN}${AWS_EC2_LAMBDA_POLICY}${MAGENTA}) for LAMBDA service exists"
  NAMED_POLICY_ARN=$(jq -r --arg prefixed_policy_name ${AWS_EC2_LAMBDA_POLICY} 'select(.PolicyName == $prefixed_policy_name) | .Arn' "${TMP}/${AWS_POLICIES}_${AWS_NAMES_PREFIX}_full.json")
  if [ -z ${NAMED_POLICY_ARN} ]
  then
    warn "  Policy ${DARK_GREEN}${AWS_EC2_LAMBDA_POLICY}${WINE} doesn't exist"
    aws_lambda_policy_create ${AWS_EC2_LAMBDA_POLICY}
    NAMED_POLICY_ARN="$(jq -r '.Policy.Arn' "${TMP}/${AWS_POLICIES}_${AWS_EC2_LAMBDA_POLICY}_creation.json")"
    aws_attaching_policy_to_role ${AWS_EC2_LAMBDA_ROLE} "${NAMED_POLICY_ARN}"
  else
    inf "  Policy ${DARK_GREEN}${AWS_EC2_LAMBDA_POLICY}${CYAN} exists"
    NAMED_ROLE_NAME=$(aws ${AWS_PROFILE_USE_CHECK[*]} iam list-entities-for-policy --policy-arn "${NAMED_POLICY_ARN}" | jq -r '.PolicyRoles[].RoleName' | grep ${AWS_EC2_LAMBDA_ROLE})
    if [ -z ${NAMED_ROLE_NAME} ]
    then
      echo "Third part of if"
      aws_attaching_policy_to_role ${AWS_EC2_LAMBDA_ROLE} "${NAMED_POLICY_ARN}"
    else
      inf "    Policy: ${DARK_GREEN}${AWS_EC2_LAMBDA_POLICY}${CYAN} is already attached to role: ${YELLOW}${AWS_EC2_LAMBDA_ROLE}"
    fi
  fi
else
  warn "  Policy ${DARK_GREEN}${AWS_EC2_LAMBDA_POLICY}${WINE} doesn't exist"
  aws_lambda_policy_create ${AWS_EC2_LAMBDA_POLICY}
  NAMED_POLICY_ARN="$(jq -r '.Policy.Arn' "${TMP}/${AWS_POLICIES}_${AWS_EC2_LAMBDA_POLICY}_creation.json")"
  aws_attaching_policy_to_role ${AWS_EC2_LAMBDA_ROLE} "${NAMED_POLICY_ARN}"
fi
#AWS IAM LAMBDA: policy

#AWS LAMBDA: security groups
if [ -s "${TMP}/${AWS_SECURITY_GROUPS}_full.json" ]
then
  inf ""
  inf "${MAGENTA}Checking if security group ${YELLOW}${SECURITY_GROUP_LAMBDA_NAME}${MAGENTA} exists"
  SECURITY_GROUP_ID=$(jq -r --arg security_group_name ${SECURITY_GROUP_LAMBDA_NAME} '.SecurityGroups[] | select(.GroupName == $security_group_name) | .GroupId' "${TMP}/${AWS_SECURITY_GROUPS}_full.json")
  if [ ! -z ${SECURITY_GROUP_ID} ]
  then
    warn "  Security group: ${BROWN}${SECURITY_GROUP_LAMBDA_NAME}${WINE} already exists"
    SECURITY_GROUP_EXISTS="yes"
  else
    aws_ec2_security_group_create "${SECURITY_GROUP_LAMBDA_NAME}"
    aws ${AWS_PROFILE_USE_CHECK[*]} ec2 describe-security-groups > "${TMP}/${AWS_SECURITY_GROUPS}_full.json"
  fi
fi
inf "    ${MAGENTA}Checking if ${YELLOW}${SECURITY_GROUP_LAMBDA_NAME}${MAGENTA} has proper ingress configuration"
for SOURCE_NETWORK in ${SOURCE_NETWORKS[*]}
do
  SECURITY_GROUP_INGRESS_SOURCE_NETWORK=$(jq -r --arg source_network ${SOURCE_NETWORK} '.SecurityGroups[].IpPermissions[].IpRanges[] | select(.CidrIp | startswith($source_network)) | .CidrIp' "${TMP}/${AWS_SECURITY_GROUPS}_full.json")
  if [ -z ${SECURITY_GROUP_INGRESS_SOURCE_NETWORK} ]
  then
    aws_security_group_ingress_add ${SECURITY_GROUP_ID} "${SOURCE_NETWORK}"
  else
    inf "      Source network: ${LIME}${SOURCE_NETWORK}${CYAN} has already been added to security group: ${YELLOW}${SECURITY_GROUP_LAMBDA_NAME}"
  fi
done
if [ ! -z ${EXTERNAL_INET_IP} ]
then
  if [[ ${EXTERNAL_INET_IP} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]
  then
    aws_security_group_ingress_add ${SECURITY_GROUP_ID} "${EXTERNAL_INET_IP}/32"
  fi
fi

#AWS LAMBDA: security groups
END_DEPLOY_TIME=$(date +%s.%4N)
DEPLOY_TIME=$(echo "scale=4; x=(${END_DEPLOY_TIME} - ${START_DEPLOY_TIME}); if(x<1) print 0; x" | bc)

START_DEPLOY_LAMBDA_TIME=$(date +%s.%4N)
#AWS Lambda deployment
#ToDo: prepare the whole package for python things
if [ -s "${TMP}/${AWS_ROLES}_${AWS_EC2_LAMBDA_ROLE}_creation.json" ]
then
  export EC2_LAMBDA_ROLE_ARN=$(jq -r '.Role.Arn' "${TMP}/${AWS_ROLES}_${AWS_EC2_LAMBDA_ROLE}_creation.json")
fi
AWS_LAMBDA_SCRIPT_NAMES=($(awk -F\~ '{print $1}' "${SCRIPTS_HOME}/lambda_functions/lambda_events.config"))
for LAMBDA_SCRIPT in ${AWS_LAMBDA_SCRIPT_NAMES[*]}
do
  AWS_LAMBDA_NAME="${AWS_COMMON_NAME}_$(echo ${LAMBDA_SCRIPT} | awk -F\. '{print $1}')_lambda"
  AWS_HANDLER_FUNCTION_NAME="$(echo ${LAMBDA_SCRIPT} | awk -F\. '{print $1}')_handler"
  AWS_LAMBDA_HANDLER="${AWS_LAMBDA_NAME}.${AWS_HANDLER_FUNCTION_NAME}"
  export SHELL_SCRIPT="$(echo "$(cat ${SCRIPTS_HOME}/lambda_functions/$(echo ${LAMBDA_SCRIPT} | awk -F\. '{print $1}').bash)")"
  export KEY_NAME
  export AWS_EC2_INSTANCES_PROFILE
  export AWS_HANDLER_FUNCTION_NAME
  export AWS_AMI_ID
  export AWS_INSTANCE_TYPE
  export SUBNET_ID
  export REGION
  export SECURITY_GROUP_ID
  lambda_function_deployment ${AWS_LAMBDA_NAME} ${AWS_HANDLER_FUNCTION_NAME} 
  debug "  Lambda EventBridge schedule deployment"
  IFS=$'\n'
  for EVENT_SCHEDULE in $(grep ${LAMBDA_SCRIPT} "${SCRIPTS_HOME}/lambda_functions/lambda_events.config" | awk -F\~ '{print $2}')
  do
    echo "EVENT_SCHEDULE=${EVENT_SCHEDULE}"
    #AWS events
    EVENT_BRIDGE_RULE="${AWS_LAMBDA_NAME}_rule"
    #debug "    Creating EventBus (it doesn't support cron jobs)"
    #aws ${AWS_PROFILE_USE_CHECK[*]} events create-event-bus --name ${AWS_COMMON_NAME}-EC2_scripts_deployment_bus > "${TMP}/${AWS_EVENTS_RULES}_${EVENT_BRIDGE_BUS}_full.json" 2>&1
    debug "    Putting rule: ${EVENT_BRIDGE_RULE} with cron: \"${EVENT_SCHEDULE}\""
    aws ${AWS_PROFILE_USE_CHECK[*]} events put-rule --schedule-expression "cron${EVENT_SCHEDULE}" --name ${EVENT_BRIDGE_RULE} > "${TMP}/${AWS_EVENTS_RULES}_${EVENT_BRIDGE_RULE}_full.json" 2>&1
    ERROR_CODE="$?"
    warn "error: ${ERROR_CODE}"
    debug "      Putting target: \"Id\"=\"1\",\"Arn\"=\"${EC2_LAMBDA_SCRIPT_ARN}\" to the rule: ${AWS_COMMON_NAME}-${AWS_LAMBDA_NAME}_invoke_rule"
    aws ${AWS_PROFILE_USE_CHECK[*]} events put-targets --rule ${EVENT_BRIDGE_RULE} --targets "Id"="1","Arn"="${EC2_LAMBDA_SCRIPT_ARN}" > "${TMP}/${AWS_EVENTS_RULES}_${EVENT_BRIDGE_RULE}_target1_full.json" 2>&1
    ERROR_CODE="$?"
    warn "error: ${ERROR_CODE}"
    #AWS events
  done

  if [[ ${RUN_SCRIPT} == yes ]]
  then
    inf "  Invoking lambda function ${YELLOW}${AWS_LAMBDA_NAME}${RED} (when event bridge will be configured properly this will be removed)"
    #logs from CloudWatch
    #aws ${AWS_PROFILE_USE_CHECK[*]} logs get-log-events --log-group-name /aws/lambda/${AWS_LAMBDA_NAME} --log-stream-name $(cat out) --limit 5
    aws ${AWS_PROFILE_USE_CHECK[*]} lambda invoke --function-name ${AWS_LAMBDA_NAME} "${LOG}/${AWS_LAMBDA_FUNCTIONS}_${AWS_LAMBDA_NAME}_full.json" --log-type Tail --query 'LogResult' --output text |  base64 -d > "${LOG}/${AWS_LAMBDA_FUNCTIONS}_${AWS_LAMBDA_NAME}.log" 2>&1
    ERROR_CODE="$?"
    INSTANCE_ID_LAMBDA=$(grep "^i-" "${LOG}/${AWS_LAMBDA_FUNCTIONS}_${AWS_LAMBDA_NAME}.log")
    aws ${AWS_PROFILE_USE_CHECK[*]} ec2 describe-instances --instance-ids ${INSTANCE_ID_LAMBDA} > "${TMP}/${AWS_INSTANCES_DETAILS}_full.json" 2>&1
    AWS_INSTANCE_DETAILS_IP=$(jq -r '.Reservations[].Instances[].PrivateIpAddress' "${TMP}/${AWS_INSTANCES_DETAILS}_full.json")
    if [ -z ${AWS_INSTANCE_DETAILS_IP} ] || [[ ${AWS_INSTANCE_DETAILS_IP} =~ null ]]
    then
      error "    Instance hasn't been run, exiting"
      failed
    fi
    inf "    Instance: ${YELLOW}${INSTANCE_ID_LAMBDA}${CYAN} with IP: ${LIME}${AWS_INSTANCE_DETAILS_IP}${CYAN} has just been created"
    is_instance_up ${INSTANCE_ID_LAMBDA}
    ##AWS Lambda invoking
    fi
done

END_DEPLOY_LAMBDA_TIME=$(date +%s.%4N)
DEPLOY_LAMBDA_TIME=$(echo "scale=4; x=(${END_DEPLOY_LAMBDA_TIME} - ${START_DEPLOY_LAMBDA_TIME}); if(x<1) print 0; x" | bc)
